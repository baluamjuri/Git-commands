# Git-commands

#Initialising Git repo from local
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/baluamjuri/AppWithStandards.git
git push -u origin master

#Clone repository
git clone https://github.com/baluamjuri/Git-commands.git GitCommands
cd GitCommands

#Cloning specific branch
git clone --single-branch --branch <branchname> <remote-repo>

#Status of the untracked/unstaged, tracked/staged
git status

#Add or track the files
git add gitcommands.txt
git add *.java
git add 'filename with spaces.txt'

#Make the staged files unstaged
git restore --staged .
git restore --staged *.txt

#Remove file 
rm -f gitcommands.txt

#Commit with message
git commit -m"adding new commands to the notes"

#Push to publish your local commits
git push

#List all files in the repository
ls

#Stash(save) changes in a dirty working directory
git stash

#Remove all stashed entries
git stash clear	

git pull

#automerge saved changes (If any conflicts then resolve it)
git stash pop 

git push

#to uncommit the changes
git reset --soft HEAD~ 

#to untrack a tracked file
git rm --cached filename 

#To switch to branch
git checkout redsky_UFE18R8_sprint3

#To create and switch to a branch
git checkout -b feature/feature-sprint3

#Create a branch 'branch1' under dev (create branch from another branch)
git checkout -b branch1 dev

#To delete a branch locally
git branch -d feature-security-usermgmt-restendpoints

#To delete a remote branch
git push --delete origin feature/samplebranch

#To push the current branch and set the remote as upstream, use
git push --set-upstream origin branchname
(or)
git push -u origin branchname

#show all remote branches
git branch -r

#shows all local and remote branches
git branch -a

#Rename the local branch
git branch -m <new_name>

#Rename the remote branch
git push origin -u <new_name>
git push origin --delete <old_name>

#creates a file in local repository
touch filename.extension 

#Merge a branch into the active branch
git merge [branch name]	

#Merge a branch into a target branch
git merge [source branch] [target branch] 

#View changes
git log	

#View changes (detailed)
git log --summary 

#Preview changes before merging
git diff [source branch] [target branch} 

============================================================

git clone as;ldkfjurl.git
git init
git add
git commit
	git commit
	git commit -v
	git commit -m "message"

Life cycle
	git status
	git status -s
	??
	A - Staging area
	M - Modified 
	Untracked
	Tracked
	  Unmodified
	  modified
	  staged
	push

.gitignore
	About.txt
	*.class
	!main.js
	/contact.txt
	
diff
	git diff --staged
	git diff --cached


log history
	git log
	git log -p
	git log -3
	git log --pretty=oneline or git log --oneline
	git log --pretty=short
	git log --pretty=full
	git log --pretty=fuler
	
Branching
	master, root commit, sha1
	For every commit - snapshot(tree, parent, author, committer)
	git branch name
	HEAD 
	git checkout branchname
	git log --oneline --all
	git log --oneline --all --graph
	git checkout -b branchname
	git merge child-branch
	git branch -d branchname
	merge strategies(fast-forward, recursive)
	git branch --merge
	git branch --no-merge
	git branch -a
	
Remote branching
	git remote
	git fetch origin
	git pull origin master  -> (fetch + merge)
	git push origin master

Difference
Aliases
	git config --global alias.graph "log --oneline --all --graph"
Rebase vs merge
	git rebase
	rebase vs merge -> difference is with commit history or graph
	git rebase --continue
	git rebase --abort

cherry-pick
	git cherry-pick 4d3afebd6cc86f79da9050d283adf293d6dd1627

Stashing
	git stash or git stash push
	git stash list
	git stash apply
	git stash drop
	git stash apply stash@{1}
	git stash pop -> (apply+drop)
	//Stash untracked files 
	git stash -u
	//Create a branch on stashed commit
	git stash branch branchname

cleaning
	//Removes files permanently, Clean works only on untracked and ignored files 
	//Clean untracked files forcefully
	git clean -f
	//clean untracked and ignored files or directories forcefully
	git clean -f -d or git clean -fd
	//clean untracked and ignored files or directories forcefully
	git clean -f -d -x 
	//Dry run on cleaning
	git clean --dry-run or git clean -n

Tagging
	//List all tags
	git tag -l or git tag 
	//Create tag
	git tag tagname
	//Create tag with a message called annotated tag
	git tag -a tagname
	//Difference between two tags
	git diff tag1 tag2
	//Delete a tag
	git tag -d tagname
	//Create tag at a particular commit
	git tag -a tagname commitid
	//Update tag to at different commit
	git tag -a tagname -f commitid
	git push origin tagname
	git push origin --tags
	//pattern search
	git tag --list "v1.*"
